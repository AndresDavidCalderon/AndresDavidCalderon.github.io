import{q as l}from"./assets/question_data-d9a8ac8a.js";let a=!1;self.addEventListener("install",()=>{console.log("service worker installed")});self.addEventListener("activate",()=>{console.log("service worker activated"),a=!1});const r=()=>{fetch(".").then(()=>{a=!1,console.log("reconnected!")}).catch(()=>{setTimeout(r,10)})};self.addEventListener("fetch",t=>{if(console.log("interfiering in fetch"),a){console.log("assuming were offline, not trying fetch."),t.respondWith(caches.match(t.request));return}t.respondWith(fetch(t.request).then(async n=>{if(console.log("Fetched succesfully!"),(await caches.open("backup")).put(t.request,n.clone()),!await caches.has("questions")){console.log("creating question backup");const s=[],o="./test_resources/";l.forEach(e=>{if("name"in e)if(e.answerShape==="multiple_files"){const c="format"in e?e.format:"png";s.push(`${o}${e.name}/question.${c}`),Array.isArray(e.answers)||(s.push(`${o}${e.name}/a.${c}`),s.push(`${o}${e.name}/b.${c}`),s.push(`${o}${e.name}/c.${c}`),s.push(`${o}${e.name}/d.${c}`))}else s.push(`${o}${e.name}/drawing.svg`)}),s.forEach(async e=>{let c;try{c=await fetch(e)}catch(i){console.log(`question resource failed to fetch or cache resource from
          ${e}
          error ${i}`)}(await caches.open("questions")).put(new Request(e),c.clone())})}return n.clone()}).catch(()=>(console.log("using fallbacks from now on"),a=!0,setTimeout(r,10),caches.match(t.request))))});
